import pandas as pd
import sys

def load_data(csv_file_path: str) -> pd.DataFrame:
    """
    Load data from a CSV file into a DataFrame.
    
    Args:
        csv_file_path (str): Path to the CSV file.
    
    Returns:
        pd.DataFrame: DataFrame containing the loaded data.
    
    Raises:
        FileNotFoundError: If the file does not exist.
        ValueError: If the file is empty or cannot be parsed.
    """
    try:
        df = pd.read_csv(csv_file_path)
        return df
    except FileNotFoundError:
        raise FileNotFoundError(f"The file {csv_file_path} was not found.")
    except pd.errors.EmptyDataError:
        raise ValueError("The file is empty.")
    except pd.errors.ParserError:
        raise ValueError("Error parsing the file. Please check the file format.")

def preprocess_data(df: pd.DataFrame) -> pd.DataFrame:
    """
    Preprocess the data: convert columns to appropriate types and calculate new columns.
    
    Args:
        df (pd.DataFrame): Raw DataFrame.
    
    Returns:
        pd.DataFrame: Preprocessed DataFrame.
    """
    df['order_date'] = pd.to_datetime(df['order_date'])
    df['product_price'] = df['product_price'].astype(float)
    df['quantity'] = df['quantity'].astype(int)
    df['total_revenue'] = df['product_price'] * df['quantity']
    df['month'] = df['order_date'].dt.to_period('M')
    return df

def compute_monthly_revenue(df: pd.DataFrame) -> pd.DataFrame:
    """
    Compute total revenue generated by the online store for each month.
    
    Args:
        df (pd.DataFrame): Preprocessed DataFrame.
    
    Returns:
        pd.DataFrame: DataFrame with total revenue per month.
    """
    return df.groupby('month')['total_revenue'].sum().reset_index().sort_values(by='month')

def compute_product_revenue(df: pd.DataFrame) -> pd.DataFrame:
    """
    Compute total revenue generated by each product.
    
    Args:
        df (pd.DataFrame): Preprocessed DataFrame.
    
    Returns:
        pd.DataFrame: DataFrame with total revenue per product.
    """
    return df.groupby('product_id').agg({
        'product_name': 'first', 
        'total_revenue': 'sum'
    }).reset_index().sort_values(by='total_revenue', ascending=False)

def compute_customer_revenue(df: pd.DataFrame) -> pd.DataFrame:
    """
    Compute total revenue generated by each customer.
    
    Args:
        df (pd.DataFrame): Preprocessed DataFrame.
    
    Returns:
        pd.DataFrame: DataFrame with total revenue per customer.
    """
    return df.groupby('customer_id')['total_revenue'].sum().reset_index().sort_values(by='total_revenue', ascending=False)

def get_top_customers(df: pd.DataFrame, top_n: int = 10) -> pd.DataFrame:
    """
    Get the top N customers by revenue generated.
    
    Args:
        df (pd.DataFrame): Preprocessed DataFrame.
        top_n (int): Number of top customers to return.
    
    Returns:
        pd.DataFrame: DataFrame with top N customers by revenue.
    """
    customer_revenue = compute_customer_revenue(df)
    return customer_revenue.head(top_n)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python data_analysis.py <path_to_csv_file>")
        sys.exit(1)
    csv_file_path = sys.argv[1]
    
    try:
        df = load_data(csv_file_path)
        df = preprocess_data(df)
        
        print("Total revenue generated by the online store for each month:")
        print(compute_monthly_revenue(df))
        
        print("\nTotal revenue generated by each product:")
        print(compute_product_revenue(df))
        
        print("\nTotal revenue generated by each customer:")
        print(compute_customer_revenue(df))
        
        print("\nTop 10 customers by revenue generated:")
        print(get_top_customers(df))
    
    except Exception as e:
        print(f"An error occurred: {e}")
